package com.example.arbitre;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;

import org.json.JSONException;

import com.example.arbitre.models.ClientSocket;
import com.example.arbitre.models.Connection;
import com.example.arbitre.models.Joueur;

import android.os.Bundle;
import android.app.Activity;
import android.content.Intent;
import android.util.Log;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.RadioButton;
import android.widget.Spinner;
import android.widget.Toast;

public class ChoixJoueurs extends Activity {
	private int matchId;
	//TODO Gestion si quitte application
	// si on quitte l application ecrire dans un fichier le match id
	// a ouverture si matchId du fichier != null on le recharge

	private List<Joueur> lesJoueurs = new ArrayList<Joueur>();
	private ClientSocket cs = ClientSocket.GetInstance();
	private Intent intent;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_choix_joueurs);
		final Spinner j1 = (Spinner) findViewById(R.id.spinnerJ1);
		final Spinner j2 = (Spinner) findViewById(R.id.spinnerJ2);
		ArrayList<Spinner> spinners = new ArrayList<Spinner>();
		spinners.add(j1);
		spinners.add(j2);
		
		// Recuperation liste joueurs serveur
		//String url = "http://82.237.169.116/rolandgarros/listJoueur.php";
		//String json = connexion(url, "GET", null);
		intent = getIntent();
		String json = intent.getStringExtra("json");
		
		json = json.split("\\r")[0].toString();
		
		System.out.println("json: " + json);
		//String json = "{\"joueurs\":[{\"id\":\"1\", \"nom\":\"nom1\", \"prenom\":\"pre1\", \"nationnalite\":\"FRA\", \"service\":\"0\"},{\"id\":\"2\", \"nom\":\"nom2\", \"prenom\":\"pre2\", \"nationnalite\":\"FRA\", \"service\":\"0\"},{\"id\":\"3\", \"nom\":\"nom3\", \"prenom\":\"pre3\", \"nationnalite\":\"FRA\", \"service\":\"0\"}]}";

        // Charger les spinners avec le json precedement recupere
		loadSpinner(spinners, json);
	}
	
	private void loadSpinner(ArrayList<Spinner> spinners, String json) {
		for(Spinner spinner : spinners){
	    	List<String> spinnerArray =  new ArrayList<String>();
	    	
	    	try {
				lesJoueurs = Joueur.listFromJSON(json);
			} catch (JSONException e) {
				Log.e("JSON Err","JSON Error: "+ e);
				e.printStackTrace();
			} catch (ParseException e) {
				Log.e("Parse Err", "Parse Error: " + e);
				e.printStackTrace();
			}
	    	
	    	for(Joueur unJoueur : lesJoueurs){
	    		spinnerArray.add(unJoueur.getNom() + " - " + unJoueur.getPrenom());
	    	}

	        ArrayAdapter<String> adapter = new ArrayAdapter<String>(
	            this, android.R.layout.simple_spinner_item, spinnerArray);

	        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
	        Spinner sItems = (Spinner) findViewById(spinner.getId());
	        sItems.setAdapter(adapter);
		}
		
	}

	public void btnPrecedentOnClick(View v){
		this.finish();	
	}
	
	public void btnJouerOnClick(View v){
		// Recuperation des infos de la vue
		Intent intent = getIntent();
		
		int courtNum = intent.getIntExtra("courtName",0);

		final Spinner j1 = (Spinner) findViewById(R.id.spinnerJ1);
		final Spinner j2 = (Spinner) findViewById(R.id.spinnerJ2);
		RadioButton rbtnJ1 = (RadioButton) findViewById(R.id.rbtnJ1);
	
		// 
		Joueur joueur1 = new Joueur();
		Joueur joueur2 = new Joueur();
		String servingPlayer = "";
		
		for(Joueur unJoueur : lesJoueurs){
			if((unJoueur.getNom()+" - " + unJoueur.getPrenom()).equals(j1.getSelectedItem().toString())){
				joueur1 = unJoueur;
			}
			
			if((unJoueur.getNom()+" - " + unJoueur.getPrenom()).equals(j2.getSelectedItem().toString())){
				joueur2 = unJoueur;
			}
		}
		
		
		if(rbtnJ1.isChecked()){
			servingPlayer = Integer.toString(joueur1.getId());
		}
		else{
			servingPlayer = Integer.toString(joueur2.getId());
		}		
		
		// Creation du json
		// TODO Modifier JSON
		// Ajouter type: arbitre
		//String json = "{\"cmd\":\"creatematch\",\"j1\":\""+joueur1.getId()+"\",\"j2\":\""+joueur2.getId()+"\",\"court\":\""+courtNum+"\",\"service\":\""+servingPlayer+"\"}";
		String json = "{\"cmd\":\"creatematch\",\"j1\":\""+1+"\",\"j2\":\""+2+"\",\"court\":\""+1+"\",\"service\":\""+1+"\"}";
		
		
		/*
		// old
		String JSON = "{\"match\":[{\"court\":\""+courtNum+"\", \"j1\":\""+joueur1.getId()+"\", \"j2\":\""+joueur2.getId()+"\",\"service\":\""+servingPlayer+"\"}]}";
        String url = "http://82.237.169.116/rolandgarros/match.php";
		//Toast.makeText(getApplicationContext(), JSON, Toast.LENGTH_LONG).show();
		*/
		//envoi JSON au serveur
        // TODO bouchon ON
		//matchId = Integer.parseInt(envoyerDonner(JSON, url));
		Log.e("MatchID", Integer.toString(matchId));
		matchId = 0;
		
		// Vue suivante
		Intent intent2 = new Intent(this, Jeu.class);
        // On envoie les donn√©es au layout
		ArrayList<Joueur> players = new ArrayList<Joueur>();
		players.add(joueur1);
		players.add(joueur2);
		
        intent2.putExtra("players", players);
        intent2.putExtra("matchID", matchId);
        // On "affiche"
        this.startActivity(intent2);
		
	}

	private String envoyerDonner(String JSON, String url) {
		String rep="";
		if (Connection.isNetworkAvailable(this)) { // on verifie qu on a acces au web
            try { // oui on essaye de se connecter a l adresse
                rep = new Connection(JSON, "POST").execute(url).get();
                System.out.println("Reponse serveur (json): " + rep);    
            } catch (InterruptedException e) {
                System.out.println("InterruptedException: " + e);
                e.printStackTrace();
            } catch (ExecutionException e) {
                System.out.println("ExecutionException: " + e);
                e.printStackTrace();
            }
        } else {
            System.out.println("No network connection available.");
            Toast.makeText(this.getApplicationContext(),
                    "No network connection available.", Toast.LENGTH_SHORT)
                    .show();
        }
		return rep;
	}
	
	private String connexion(final String url,
            final String method, final String json) {
        String rep = "";

        if (Connection.isNetworkAvailable(this)) { // on verifie qu on a acces au web
            try { // oui on essaye de se connecter a l adresse
                rep = new Connection(json, method).execute(url).get();
                System.out.println("Reponse serveur (json): " + rep);    
            } catch (InterruptedException e) {
                System.out.println("InterruptedException: " + e);
                e.printStackTrace();
            } catch (ExecutionException e) {
                System.out.println("ExecutionException: " + e);
                e.printStackTrace();
            }
        } else {
            System.out.println("No network connection available.");
            Toast.makeText(this.getApplicationContext(),
                    "No network connection available.", Toast.LENGTH_SHORT)
                    .show();
        }
        return rep;
    }
}
